---

- block:
  - name: Create consul group
    group: name=consul system=yes

  - name: Create consul user
    user:
      name=consul
      group=consul
      system=yes

  - name: Create consul directory
    file:
      path: "{{ item }}"
      state: directory
      owner: consul
      group: consul
      mode: 0755
    with_items:
      - "{{ consul_home }}"
      - "{{ consul_home }}/bin"
      - "{{ consul_home }}/data"
      - "{{ consul_config_dir }}"

  - name: Check consul package
    local_action:
      stat
        path=install/files/consul_{{ consul_version }}_linux_amd64.zip
    become: no
    register: consul_package

  - name: Download consul package locally
    local_action:
      get_url
        url=https://releases.hashicorp.com/consul/{{ consul_version }}/consul_{{ consul_version }}_linux_amd64.zip
        dest=install/files
        force=no
    become: no
    run_once: yes
    when: not consul_package.stat.exists

  - package: name=unzip state=present

  - name: Copy consul package to hosts
    unarchive:
      src=install/files/consul_{{ consul_version }}_linux_amd64.zip
      dest={{ consul_home }}/bin
    notify:
      - Start consul service

  - name: Check consul certificates
    stat:
      path: "{{ item }}"
    register: consul_certs
    with_items:
      - "{{ consul_home }}/secrets/ca.crt"
      - "{{ consul_home }}/secrets/server.cert.pem"
      - "{{ consul_home }}/secrets/server.key.pem"

  - name: Set consul_tls_enabled flag
    set_fact:
      consul_tls_enabled: "{{ consul_certs.results | rejectattr('stat.exists') | list | length == 0 and not consul_reset_tls }}"

  - name: Copy consul config file
    template:
      src={{ item.src }}
      dest={{ item.dest }}
      owner=consul
      group=consul
      mode={{ item.mode }}
    with_items:
      - { src: "consul.json.j2", dest: "{{ consul_config_file }}", mode: "0600" }
      - { src: "consul.systemd.j2", dest: "/etc/systemd/system/consul.service", mode: "0644" }
    notify:
      - Start consul service

  - name: Check encrypt config file
    stat:
      path: "{{ consul_config_dir }}/encrypt.json"
    register: encrypt_file

  - name: Generate encryption key
    command: "{{ consul_home }}/bin/consul keygen"
    register: keygen
    run_once: yes
    when: not encrypt_file.stat.exists

  - name: Copy encrypt config file
    template:
      src=encrypt.json.j2
      dest={{ consul_config_dir }}/encrypt.json
      owner=consul
      group=consul
      mode=0600
    when: not encrypt_file.stat.exists
    notify:
      - Start consul service

  - name: Set consul env variables
    template:
      src=templates/consul.sh.j2
      dest=/etc/profile.d/consul.sh
      owner=consul
      group=consul

- always:
  - meta: flush_handlers

- block:
  - name: Bootstrap ACL system
    uri:
      url: http://{{ ansible_host }}:8500/v1/acl/bootstrap
      method: PUT
      status_code: 200, 403
    register: root_token
    no_log: yes
    run_once: true

  - name: Save consul init data
    local_action:
      copy
        content={{ root_token.json }}
        dest=./consul_init_data
    become: no
    run_once: yes
    when: root_token.status == 200 and root_token.json

  - name: Lookup consul init data
    set_fact:
      consul_init_data: "{{ lookup('file', 'consul_init_data') }}"
    no_log: yes

  - name: Check agent ACL
    uri:
      url: http://{{ ansible_host }}:8500/v1/acl/list
      headers:
        X-Consul-Token: "{{ consul_init_data.ID }}"
    register: acls
    no_log: yes
    run_once: true

  - set_fact:
      acl_agent: "{{ acls.json | selectattr('Name', 'equalto', 'acl_agent_token') | list | first }}"
    no_log: yes
    when: acls.json | selectattr('Name', 'equalto', 'acl_agent_token') | list

  - name: Create agent ACL
    uri:
      url: http://{{ ansible_host }}:8500/v1/acl/create
      method: PUT
      headers:
        X-Consul-Token: "{{ consul_init_data.ID }}"
      body_format: json
      body:
        Name: acl_agent_token
        Type: client
        Rules: "node \"\" { policy = \"write\" } service \"\" { policy = \"read\" }"
    register: agent_acl_response
    no_log: yes
    when: acl_agent is undefined
    run_once: true

  - name: Update agent ACL
    uri:
      url: http://{{ ansible_host }}:8500/v1/acl/update
      method: PUT
      headers:
        X-Consul-Token: "{{ consul_init_data.ID }}"
      body_format: json
      body:
        Id: "{{ acl_agent.ID }}"
        Name: acl_agent_token
        Type: client
        Rules: "node \"\" { policy = \"write\" } service \"\" { policy = \"read\" }"
    no_log: yes
    when: acl_agent is defined
    run_once: true

  - set_fact:
      acl_agent: "{{ agent_acl_response.json }}"
    when: acl_agent is undefined
    no_log: yes

  - name: Copy ACL consul config file
    template:
      src=consul_acl.json.j2
      dest={{ consul_config_dir }}/acl.json
      owner=consul
      group=consul
      mode=0600
    notify:
      - Start consul service

  - name: Anonymous ACL
    uri:
      url: http://{{ ansible_host }}:8500/v1/acl/update
      method: PUT
      headers:
        X-Consul-Token: "{{ consul_init_data.ID }}"
      body_format: json
      body:
        Id: anonymous
        Name: Anonymous Token
        Type: client
        Rules: "node \"\" { policy = \"read\" } service \"\" { policy = \"read\" }"
    run_once: true

- always:
  - meta: flush_handlers
